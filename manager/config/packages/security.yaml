security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        fetcher:
            id: App\Security\UserProvider
    encoders:
        App\Security\UserIdentity: native
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: fetcher
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
                - App\Security\FacebookAuthenticator
            user_checker: App\Security\UserChecker
            entry_point: App\Security\LoginFormAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
            logout:
                path: auth.logout
            #form_login: true
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_MANAGE_USERS, ROLE_WORK_MEMBERS_MANAGE, ROLE_WORK_ROLES_MANAGE, ROLE_WORK_PROJECTS_MANAGE, ROLE_WORK_TASK_MANAGE]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/signup, roles: PUBLIC_ACCESS }
        - { path: ^/reset, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
